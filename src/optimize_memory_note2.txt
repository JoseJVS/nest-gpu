ALL DONE:

In the calibration size ExternalTargetSpikeNodeId properly
(maybe using maximum average rate?):
replace [n_hosts*(max_spike_per_host + 1) and
n_hosts*max_spike_per_host with max_remote_spike_num

Check that n_spike_tot is not larger than maximum
compare with max_remote_spike_num

See if use of max_spike_per_host can be avoided in
CopySpikeFromRemote
Maybe h_ExternalSourceSpikeNodeId can be organized differently?
Otherwise max_spike_per_host should be differentiated for sending and receiving spikes (average over host in the first case, maximum over all host in the second)

Maybe rename d_ExternalSourceSpikeCumul and h_ExternalSourceSpikeCumul
to d_ExternalSourceSpikeIdx0 and h_ExternalSourceSpikeIdx0?

In spike_mpi.cu the kernel
__global__ void SendExternalSpike()
should be copied/pasted in two kernels:
1) the first for counting spikes per remote target host;
2) The second for filling the array
replace the internal loop with the approach proposed by Partick Atkins(on?)


after counting (1) use the prefix scan
(as in JoinSpikes line 492 to evaluate the first index of each target host in the 1D array. Maybe rename d_ExternalTargetSpikeCumul to
d_ExternalTargetSpikeIdx0

ExternalTargetSpikeNodeIdJoin should replace ExternalTargetSpikeNodeId,
which therefore becomes a compact 1D array rather than a 2D array with empty spaces in the rows

Remove d_ExternalTargetSpikeCumul, h_ExternalTargetSpikeCumul

Now NewExternalTargetSpikeNodeId
must be sized properly and replace ExternalTargetSpikeNodeId

remove ExternalTargetSpikeNodeIdJoin

in kernel __global__ void organizeExternalSpikesPerTargetHost()
fix section:
      //if (have_remote_spike_height) {
      //}
maybe something like:
ExternalTargetSpikeHeight[i_arr] = height;


in kernel externaspikerese
replace loop with cuda threads

find a more efficient solution for resetting h_ExternalTargetSpikeIdx0
elements when n_ext_spikes is zero in SendSpikeToRemote

rename SendExternalSpike_time_ to organizeExternalSpike_time_

remove JoinSpike_time_;
