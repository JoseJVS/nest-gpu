In spike_mpi.cu the kernel
__global__ void SendExternalSpike()
should be copied/pasted in two kernels:
1) the first for counting spikes per remote target host;
2) The second for filling the array
replace the internal loop with the approach proposed by Partick Atkins(on?)


after counting (1) use the prefix scan
(as in JoinSpikes line 492 to evaluate the first index of each target host in the 1D array. Maybe rename d_ExternalTargetSpikeCumul to
d_ExternalTargetSpikeIdx0

ExternalTargetSpikeNodeIdJoin should replace ExternalTargetSpikeNodeId,
which therefore becomes a compact 1D array rather than a 2D array with empty spaces in the rows

In the calibration size ExternalTargetSpikeNodeId properly
(maybe using maximum average rate?)

remove d_ExternalTargetSpikeCumul, h_ExternalTargetSpikeCumul
now NewExternalTargetSpikeNodeId
must be sized properly and replace ExternalTargetSpikeNodeId

remove ExternalTargetSpikeNodeIdJoin

in kernel __global__ void organizeExternalSpikesPerTargetHost()
fix section:
      //if (have_remote_spike_height) {
      //}
maybe something like:
ExternalTargetSpikeHeight[i_arr] = height;


in kernel externaspikerese
replace loop with cuda threads

find a more efficient solution for resetting h_ExternalTargetSpikeIdx0
elements when n_ext_spikes is zero in SendSpikeToRemote
